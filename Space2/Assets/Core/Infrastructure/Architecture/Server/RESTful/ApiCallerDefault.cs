using Assets.Infrastructure.Architecture.Modulux;
using Assets.Infrastructure.Architecture.Server.RESTful.Tools;
using UniRx;

namespace Assets.Infrastructure.Architecture.Server.RESTful
{
    /// <summary>
    /// Defalut implementation of IApiCaller
    /// </summary>
    public class ApiCallerDefault : IApiCaller
    {
        /// <summary>
        /// Generates a web stream
        /// </summary>
        /// <typeparam name="TCallRawDataType">Data type expected from server</typeparam>
        /// <typeparam name="TReplyDataType">Data type to be returned by the request</typeparam>
        /// <param name="request">an ApiRequest containing all the data needed to dispatch a request and process the reply</param>
        /// <returns>web stream generated by ObservableWWW</returns>
        private IObservable<TCallRawDataType> GetWebStream<TCallRawDataType, TReplyDataType>(ApiRequest<TCallRawDataType, TReplyDataType> request)
        {
            ModuluxRoot.Logger.Log("Getting web stream");

            //TODO - select Get/Post function with the appropriate return type by TCallRawDataType
            return request.Method == WebMethod.Get ? (IObservable<TCallRawDataType>)ObservableWWW.Get(request.ToGetString()) : (IObservable<TCallRawDataType>)ObservableWWW.Post(request.FullPath(), request.ToWWWForm());
        }

        public IObservable<TReplyDataType> Call<TCallRawDataType, TReplyDataType>(ApiRequest<TCallRawDataType, TReplyDataType> request)
                        where TCallRawDataType : class
        {
            if (request.ReplyHandler == null)
                throw new System.Exception("Cannot process an ApiRequest without request.ReplyHandler");

            return GetWebStream(request)
                .Select(request.ReplyHandler)
                .Retry(request.TimeoutRetries);
        }
    }
}